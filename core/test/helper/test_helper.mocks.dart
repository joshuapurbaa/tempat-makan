// Mocks generated by Mockito 5.3.2 from annotations
// in core/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i7;

import 'package:core/core.dart' as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantDetailModel_1 extends _i1.SmartFake
    implements _i3.RestaurantDetailModel {
  _FakeRestaurantDetailModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i3.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>>
      getRestaurantList() => (super.noSuchMethod(
            Invocation.method(
              #getRestaurantList,
              [],
            ),
            returnValue:
                _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>>.value(
                    _FakeEither_0<_i3.Failure, List<_i3.Restaurant>>(
              this,
              Invocation.method(
                #getRestaurantList,
                [],
              ),
            )),
          ) as _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>>);
  @override
  _i5.Future<_i2.Either<_i3.Failure, _i3.RestaurantDetail>> getRestaurantDetail(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantDetail,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i3.Failure, _i3.RestaurantDetail>>.value(
                _FakeEither_0<_i3.Failure, _i3.RestaurantDetail>(
          this,
          Invocation.method(
            #getRestaurantDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i3.Failure, _i3.RestaurantDetail>>);
  @override
  _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>> searchRestaurant(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRestaurant,
          [query],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>>.value(
                _FakeEither_0<_i3.Failure, List<_i3.Restaurant>>(
          this,
          Invocation.method(
            #searchRestaurant,
            [query],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i3.Failure, List<_i3.Restaurant>>>);
}

/// A class which mocks [RestaurantRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRemoteDataSource extends _i1.Mock
    implements _i3.RestaurantRemoteDataSource {
  MockRestaurantRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.RestaurantModel>> getRestaurantList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantList,
          [],
        ),
        returnValue: _i5.Future<List<_i3.RestaurantModel>>.value(
            <_i3.RestaurantModel>[]),
      ) as _i5.Future<List<_i3.RestaurantModel>>);
  @override
  _i5.Future<_i3.RestaurantDetailModel> getRestaurantDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurantDetail,
          [id],
        ),
        returnValue: _i5.Future<_i3.RestaurantDetailModel>.value(
            _FakeRestaurantDetailModel_1(
          this,
          Invocation.method(
            #getRestaurantDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.RestaurantDetailModel>);
  @override
  _i5.Future<List<_i3.RestaurantModel>> searchRestaurant(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRestaurant,
          [query],
        ),
        returnValue: _i5.Future<List<_i3.RestaurantModel>>.value(
            <_i3.RestaurantModel>[]),
      ) as _i5.Future<List<_i3.RestaurantModel>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i4.Response>);
  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<_i7.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i5.Future<_i7.Uint8List>);
  @override
  _i5.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i4.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
